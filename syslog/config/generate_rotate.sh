#!/usr/bin/env bash
set -e

###############################################################################
# Konfigurasi Umum
###############################################################################
LOG_MESSAGES_FILE_PATH="${LOG_MESSAGES_FILE_PATH:-"/app/syslog/config/log_messages.json"}"
LOG_ROOT="/mnt/Data/Syslog"
CONFIG_FILE="/app/syslog/logrotate/syslog-ng"
GENERATE_LOG="/mnt/Data/Syslog/default/logrotate/generate.log"
OWNER="abdullah"
GROUP="abdullah"

###############################################################################
# Fungsi log
###############################################################################
log() {
  local offset_hours zone time_format="%d-%m-%Y %H:%M:%S"
  offset_hours=$(date +%z | awk '{
    sign=substr($0,1,1);
    hours=substr($0,2,2);
    minutes=substr($0,4,2);
    total=hours+(minutes/60);
    if(sign=="-"){total=-total};
    printf "%.0f", total
  }')

  if [[ "$offset_hours" -eq 8 ]]; then
    zone="WITA"
  elif [[ "$offset_hours" -eq 7 ]]; then
    zone="WIB"
  else
    zone="UTC"
  fi

  local message="$(date +"$time_format") $zone - $*"
  echo "$message"
  echo "$message" >> "$GENERATE_LOG"
}

###############################################################################
# Load pesan
###############################################################################
load_messages() {
  local filepath="$LOG_MESSAGES_FILE_PATH"
  if [[ -f "$filepath" ]]; then
    MESSAGES="$(cat "$filepath")"
    log "$(get_message "generate.load_messages_ok") $filepath"
  else
    log "$(get_message "generate.load_messages_not_found")"
    MESSAGES="{}"
  fi
}

get_message() {
  local key="$1"
  echo "$MESSAGES" | jq -r ".${key} // \"\""
}

###############################################################################
# Eksekusi utama
###############################################################################
load_messages

log "$(get_message "generate.ensure_config_dir")"
mkdir -p "$(dirname "$CONFIG_FILE")"

if [[ -f "$CONFIG_FILE" ]]; then
  log "$(get_message "generate.config_exists")"
  exit 0
fi

log "$(get_message "generate.creating_config") $CONFIG_FILE"
cat <<EOF > "$CONFIG_FILE"
# Generated by generate_rotate.sh
# Date: $(date '+%d-%m-%Y %H:%M:%S %Z')
EOF

log "$(get_message "generate.scanning_logs") $LOG_ROOT"
MAPFILE=()
while IFS= read -r file; do
  MAPFILE+=("$file")
done < <(find "$LOG_ROOT" -type f -name "*.log")

if [[ ${#MAPFILE[@]} -eq 0 ]]; then
  log "$(get_message "generate.no_logs_found")"
else
  for LOG_FILE in "${MAPFILE[@]}"; do
    cat <<EOF >> "$CONFIG_FILE"
"$LOG_FILE" {
    size 5M
    rotate 7
    compress
    delaycompress
    missingok
    notifempty
    copytruncate
    su $OWNER $GROUP
    create 0644 $OWNER $GROUP
    postrotate
        docker exec syslog-ng kill -HUP 1 2>/dev/null || true
    endscript
}

EOF
    log "$(get_message "generate.adding_log_config"): $LOG_FILE"
  done
fi

log "$(get_message "generate.config_creation_done"): $CONFIG_FILE"
log "$(get_message "generate.generate_finished")"